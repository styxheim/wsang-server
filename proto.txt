TimeStamp: Long
  Временная метка, полученная от сервера
  Изменение любого параметра влечёт за собой изменение TimeStamp
  Назначается сервером при получении данных заезда или изменений параметра
terminal_id: HexString
  Идентификатор клиента, уникальный для каждого устройства




Запрос клиента на обновление данных на сервере:

GET /api/data/<CompetitionId>/<TimeSamp>/<TerminalId>

Ответ:

{
  <RaceStatus = RaceStatus>
  <TerminalStatus = [TerminalStatus, TerminalStatus, ...]>
  <Laps = [Lap, Lap ...]>
}

Ответ отсылается от минимального значение timestamp,
например, с &timestamp=0 должны быть отправлены все имеющиеся записи и настройки

RaceStatus, TerminalStatus, Laps -> необязательная поля ответа
TerminalStatus -> может содержать как конфигурацию для одного конкретного клиента, так и для нескольких


Конфигурация соревнований: номера ворот, штрафы, номера экипажей, дисциплины

RaceStatus = {
  CompetitionId = long
  TimeStamp     = long
  Gates         = [int, ...]
  Penalties     = [int, ...]
  Crews         = [int, ...]
  Disciplines   = [{'id': int, 'name': string}, ...]
}

CompetitionId: Идентификатор соревнований.
  Смена идентификатора для клиента означает сброс данных гонки

Конфигурация терминала
TerminalStatus = {
  {
    TimeStamp = long
    TerminalId = HexString
    Gates = [int, ...]
  }
}


Номера ворот для судейства
Gates -> [
  -2          -> Start
  -3          -> Finish
   0 ... max  -> any gates
]


Lap = { TimeStamp = long, CrewId = int, LapId = int, StartTime = long, FinishTime = long, Gates = Gates }
Gates = [ { Gate = int, Penalty = int }, ... ]


POST /api/update/<CompetitionId>/<TerminalId>
{
  [
    Lap, Lap, ...
  ]
}
